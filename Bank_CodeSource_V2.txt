//#include <bits/stdc++.h>
#include <iostream>
#include <algorithm>
#include <sstream>
#include <string>
#include <cctype>
#include <cmath>
#include <vector>
#include <map>
#include <set>
#include <list>
#include <forward_list>
#include <map>
#include <iomanip>
#include <fstream>

using namespace std;

//using namespace Matrix;
// << Mostafa_Shraief >> (:
#define ll int64_t
#define FORn(a,n)  for(int i=0;i<n; ++i) cin >> a[i]
#define co cout <<
#define ci cin >>
#define o <<
#define endl '\n'
#define turbo ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)


void Print_Spaces(short Times)
{

    for (short _ = 0; _ < Times; ++_)
        co " ";

}

void Print_UnderScore(int Times, bool New_Line = 0)
{

    for (short _ = 0; _ < Times; ++_)
        co "_";

    if (New_Line)
        co endl;

}

void Print(string Message)
{

    if (Message != "")
        co Message o endl;

}

short ReadValidate_and_PosNumber(string Message = "")
{

    short Num;

    co Message;
    ci Num;

    while (cin.fail() || Num < 0)
    {
        cin.clear();
        cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');

        Print("Not Valid, Please Try Again : ");
        ci Num;
    }

    return Num;

}

short ReadValidateNumber(string Message = "")
{

    short Num;

    co Message;
    ci Num;

    while (cin.fail())
    {
        cin.clear();
        cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');

        Print("Not Valid, Please Try Again:");
        ci Num;
    }

    return Num;

}

struct StringInfo
{

    int length = 0;
    int Count_Lower_Letters = 0;
    int Count_Upper_Letters = 0;

};

void Print_String(string & St, string Message = "")
{

    co Message;
    getline(cin >> ws, St);

}

void Print_String(char Letter, string Message = "")
{

    co Message;
    co Letter;

}

void First_Letter_Of_Each_Word(string St)
{

    int siz = size(St); bool Is_First_Letter = true;

    for (int i = 0; i < siz; ++i)
    {

        if (St[i] != ' ' && Is_First_Letter)
            co St[i] o endl;

        Is_First_Letter = (St[i] == ' ') ? true : false;

    }

}

void Upper_First_Letter_Of_Each_Word(string & St)
{

    int Length = St.length(); bool Is_First_Letter = true;

    for (int i = 0; i < Length; ++i)
    {

        if (Is_First_Letter)
            St[i] = toupper(St[i]);

        Is_First_Letter = (St[i] == ' ') ? true : false;

    }

}

void Lower_First_Letter_Of_Each_Word(string & St)
{

    int Length = St.length(); bool Is_First_Letter = true;

    for (int i = 0; i < Length; ++i)
    {

        if (Is_First_Letter)
            St[i] = tolower(St[i]);

        Is_First_Letter = (St[i] == ' ') ? true : false;

    }

}

void Upper_All_Letters_Of_String(string & St)
{

    int length = St.length();

    for (int i = 0; i < length; ++i)
    {

        St[i] = toupper(St[i]);

    }

}

void Lower_All_Letters_Of_String(string & St)
{

    int length = St.length();

    for (int i = 0; i < length; ++i)
    {

        St[i] = tolower(St[i]);

    }

}

char Invert_Case_Letter(char Letter)
{

    return (isupper(Letter)) ? tolower(Letter) : toupper(Letter);

}

string Invert_Case_Letters(string St)
{

    int length = St.length();

    for (int i = 0; i < length; ++i)
    {

        St[i] = Invert_Case_Letter(St[i]);

    }

    return St;

}

bool Check_IsUpper(char Letter)
{

    return isupper(Letter) && isalpha(Letter) ? true : false;

}

StringInfo StrInfo(string St)
{

    StringInfo Info;

    Info.length = St.length();

    for (int i = 0; i < Info.length; ++i)
    {

        if (isalpha(St[i]))
            Check_IsUpper(St[i]) ? ++Info.Count_Upper_Letters : ++Info.Count_Lower_Letters;

    }

    return Info;

}

void Print_Each_Word_In_New_Line(string St)
{

    int Length = St.length();

    for (int i = 0; i < Length; ++i)
    {
        if (St[i] != ' ')
        {

            do
            {

                co St[i];
                ++i;

            } while (i < Length && St[i] != ' ');

            co endl;

        }
    }

}

void Print_Each_Word_In_New_Line_V2(string St)
{

    string temp;
    short Pos;

    while ((Pos = St.find(" ")) != St.npos)
    {

        temp = St.substr(0, Pos);

        if (temp != "")
            co temp o endl;

        St.erase(0, Pos + 1);

    }

    if (St != "")
        co St o endl;

}

int Count_Words(string St)
{

    int cnt = 0;

    string temp;
    short Pos;

    while ((Pos = St.find(" ")) != St.npos)
    {

        if (*St.begin() != ' ')
            ++cnt;

        St.erase(0, Pos + 1);

    }

    if (St != "")
        ++cnt;

    return cnt;

}

vector <string> Split(string St, string Del = " ", bool Senstive = 1, bool Dont_Ignore_Empty_Strings = 0)
{

    vector <string> vString;

    string temp, S2 = "";
    short Pos;

    if (!Senstive)
    {

        for (char c : St)
            S2 += tolower(c);
        for (char& c : Del)
            c = tolower(c);

    }
    else
        S2 = St;

    while ((Pos = S2.find(Del)) != S2.npos)
    {

        temp = S2.substr(0, Pos);

        if (temp != "" || Dont_Ignore_Empty_Strings)
            vString.push_back(temp);

        S2.erase(0, Pos + Del.length());

    }

    if (S2 != "")
        vString.push_back(S2);

    return vString;

}

string Trim_Left(string St)
{

    int len = St.length();

    for (int i = 0; i < len; ++i)
    {

        if (St[i] != ' ')
            return St.substr(i);

    }

    return "";

}

string Trim_Right(string St)
{

    int len = St.length();

    for (int i = len - 1; i >= 0; --i)
    {

        if (St[i] != ' ')
            return St.substr(0, i + 1);

    }

    return "";

}

string Trim(string St)
{

    return Trim_Left(Trim_Right(St));

}

string Join_string(vector <string> vSt, string Sep = " ", bool Delete_Last_Sep = 1)
{

    string result = "";

    for (auto& x : vSt)
    {
        result += x + Sep;
    }

    if (Delete_Last_Sep)
        result.erase(result.end() - Sep.length(), result.end());

    return result;

}

string reverse_Words(string St, string Sep = " ")
{

    string Result = "";
    vector <string> vSt = Split(St);

    for (auto it = vSt.rbegin(); it != vSt.rend(); ++it)
        Result += *it + Sep;

    return Result.substr(0, Result.length() - Sep.length());

}

string Replace_Words(string S1, string Del, string Replace, bool Sensitive = 1)
{

    return Join_string(Split(" " + S1, Del, Sensitive), Replace, 0).substr(1);

}

string Replace(string st, string old_word, string new_word)
{

    int pos;

    while ((pos = st.find(old_word)) != st.npos)
    {

        st.replace(pos, old_word.length(), new_word);

    }

    return st;

}

string Remove_Punctuations(string S1)
{

    string S2 = "";

    for (char& c : S1)
    {
        if (!ispunct(c))
            S2 += c;
    }

    return S2;

}


string User_File_Name = "Users_Management";

void Building_Bank_System()
{

    remove("Users_Management.txt");

    fstream File;

    File.open("Users_Management.txt", ios::out);

    if (File.is_open())
    {

        File o ".#//#1234#//#Admin#//#.#//#0#//#-1\n";

        File.close();

    }

}

bool Check_Bank_System()
{

    fstream File;

    File.open("Users_Management.txt", ios::in | ios::app);

    if (File.is_open())
    {

        string Record;

        while (getline(File, Record))
        {

            if (Record == ".#//#1234#//#Admin#//#.#//#0#//#-1")
            {
                return 1;
                File.close();
            }

        }
        
        File.close();

    }

    return 0;

}

void Add_User_To_Bank_System(string Record = "")
{

    fstream File;

    File.open("Users_Management.txt", ios::out | ios::app);

    if (File.is_open())
    {

        File o Record o endl;

        File.close();

    }

}

string Bank_File_Name = "Bank";

string Bank_Full_File_Name= "Bank.txt";

bool Check_User_Name_Is_Exist(string User_Name);

bool Check_Login_File_Record(string& Record);

void Logout_Account();

struct stBankInfo
{

    string Account_Number = "";
    string PIN_Code = "";
    string User_Name = "";
    string Phone_Number = "";
    float Account_Balance = 0;
    int Permissions = 834;
    string Record = "";

    void Print()
    {

        co "Account : _____________________" o endl;
        co "Account Number : " o Account_Number o endl;
        co "PIN Code : " o PIN_Code o endl;
        co "User Name : " o User_Name o endl;
        co "Phone Number : " o Phone_Number o endl;
        co "Account Balance : " o Account_Balance o endl;
        co "Account Permissions : " o Permissions o endl;
        co "_______________________________" o endl;
        
    }

    void Print_User_Info()
    {

        co "User : ________________________" o endl;
        co "User Name : " o User_Name o endl;
        co "PIN Code : " o PIN_Code o endl;
        co "Account Permissions : " o Permissions o endl;
        co "_______________________________" o endl;

    }

    string Generate_Account_Record(string Sperator = "#//#")
    {

        vector <string> v_stBankinfo = { Account_Number, PIN_Code, User_Name, Phone_Number };
        string Line_Record;

        for (auto x : v_stBankinfo)
        {
            Line_Record += x + Sperator;
        }

        ostringstream Digits;
        Digits << setprecision(3) o fixed o Account_Balance;

        Line_Record += Digits.str() + Sperator;

        Line_Record += to_string(Permissions);

        return Line_Record;

    }

    stBankInfo VectorRecored_To_stBankInfo(vector <string>& v_Bank_Info)
    {
        stBankInfo Bank_Info;

        short siz = size(v_Bank_Info);

        for (short Info = 0; Info < siz; ++Info)
        {

            switch (Info)
            {
            case 0:
                Bank_Info.Account_Number = v_Bank_Info.at(Info);
                break;
            case 1:
                Bank_Info.PIN_Code = v_Bank_Info.at(Info);
                break;
            case 2:
                Bank_Info.User_Name = v_Bank_Info.at(Info);
                break;
            case 3:
                Bank_Info.Phone_Number = v_Bank_Info.at(Info);
                break;
            case 4:
                Bank_Info.Account_Balance = (float)stoi(v_Bank_Info.at(Info));
            case 5:
                Bank_Info.Permissions = stoi(v_Bank_Info.at(Info));
                break;
            default:
                break;
            }

        }

        return Bank_Info;

    }

};

struct stAccountInfo
{

    string User_Name;
    string Password;

    void Get_Account_Info()
    {
        co "Inter Your User Name : ";   getline(cin >> ws, User_Name);
        co "Inter Password : ";   ci Password;
    }

};

struct stSpaces
{

    short Account_Number = 17;
    short Pin_Code = 11;
    short User_Name = 40;
    short Phone_Number = 17;
    short Balance = 20;
    short Permissions = 10;
    short Title_Spaces = 60;

};

vector <stBankInfo> Extract_Accounts_From_File(string File_Name);

enum en_Bank_Table { Clients = 1, Add_Cl, Delete_Cl, Update_Cl, Find_Cl, Transactions, ManageUsers, Logout, Exit };

enum en_Transactions { Deposit = 1, Withdraw, Total_Balances, Back_Main };

enum en_Manage_Users { Show_List = 1, Add_Us, Delete_Us, Update_Us, Find_Us, Back_Main2 };

void Dynamic_Accounts_List_Table(string Title_Part1 = "", string Title_Part2 = "", bool Account_Number = 1, bool User_Name = 1, bool Pin_Code = 1, bool Phone_Number = 1, bool Balance = 1, bool Permissions = 0, string File_Name = Bank_File_Name)
{

    vector <stBankInfo> vBankInfo = Extract_Accounts_From_File(File_Name);

    stSpaces Spaces;

    Spaces.Title_Spaces = 0;
    Spaces.Title_Spaces += Account_Number ? 10 : 0;
    Spaces.Title_Spaces += User_Name ? 20 : 0;
    Spaces.Title_Spaces += Pin_Code ? 10 : 0;
    Spaces.Title_Spaces += Phone_Number ? 10 : 0;
    Spaces.Title_Spaces += Balance ? 10 : 0;
    Spaces.Title_Spaces += Permissions ? 10 : 0;

    co right o setw(Spaces.Title_Spaces) o Title_Part1 o vBankInfo.size() o Title_Part2 o endl;

    short Under_Score = 0;
    Under_Score += Account_Number ? Spaces.Account_Number + 2 : 0;
    Under_Score += User_Name ? Spaces.User_Name + 2 : 0;
    Under_Score += Pin_Code ? Spaces.Pin_Code + 2 : 0;
    Under_Score += Phone_Number ? Spaces.Phone_Number + 2 : 0;
    Under_Score += Balance ? Spaces.Balance + 2 : 0;
    Under_Score += Permissions ? Spaces.Permissions + 4 : 0;

    Print_UnderScore(Under_Score, 1);

    if (Account_Number)
        co "| " o left o setw(Spaces.Account_Number) o "Account Number";
    if (User_Name)
        co "| " o left o setw(Spaces.User_Name) o "User Name";
    if (Pin_Code)
        co "| " o left o setw(Spaces.Pin_Code) o "PIN Code";
    if (Phone_Number)
        co "| " o left o setw(Spaces.Phone_Number) o "Phone Number";
    if (Balance)
        co "| " o left o setw(Spaces.Balance) o "Balance";
    if (Permissions)
        co "| " o left o setw(Spaces.Permissions) o "Permissions";

    co endl;

    Print_UnderScore(Under_Score, 1);

    for (auto Account : vBankInfo)
    {

        if (Account_Number)
            co "| " o left o setw(17) o Account.Account_Number;
        if (User_Name)
            co "| " o left o setw(40) o Account.User_Name;
        if (Pin_Code)
            co "| " o left o setw(11) o Account.PIN_Code;
        if (Phone_Number)
            co "| " o left o setw(17) o Account.Phone_Number;
        if (Balance)
            co "| " o left o setw(20) o setprecision(3) o fixed o Account.Account_Balance;
        if (Permissions)
            co "| " o left o setw(17) o Account.Permissions;

        co endl;

    }

    Print_UnderScore(Under_Score, 1);

}

stBankInfo Get_Line_Recorde_and_Generate_stBankInfo(string Line_Recorde = "", string Seperator = "#//#")
{

    stBankInfo Bank_info;

    if (Line_Recorde == "")
        Print_String(Line_Recorde, "Inter Line Recorde : ");

    Line_Recorde = Trim(Line_Recorde);

    vector <string> v_Bank_info = Split(Line_Recorde, Seperator, 1, 1);

    Bank_info = Bank_info.VectorRecored_To_stBankInfo(v_Bank_info);

    Bank_info.Record = Bank_info.Generate_Account_Record();

    return Bank_info;

}

vector <stBankInfo> Extract_Accounts_From_File(string File_Name = "Bank")
{

    vector <stBankInfo> v_AccountsInfo;

    string Line;

    fstream File;
    File.open(File_Name + ".txt", ios::in | ios::app | ios::out);

    if (File.is_open())
    {

        while (getline(File, Line))
        {

            v_AccountsInfo.push_back(Get_Line_Recorde_and_Generate_stBankInfo(Line));

            v_AccountsInfo.back().Record = v_AccountsInfo.back().Generate_Account_Record();

        }

        File.close();

    }


    return v_AccountsInfo;

}

bool Check_If_Account_Number_Exist_In_File(string Account_Number)
{

    vector <stBankInfo> v_AccountsInfo = Extract_Accounts_From_File("Bank");

    bool ok = 0;


    for (auto Account_Info : v_AccountsInfo)
    {

        if (Account_Number == Account_Info.Account_Number)
        {

            ok = 1;

            break;

        }

        ok = 0;

    }

    return ok;

}

stBankInfo Get_Bank_Info_Using_Account_Number(string Account_Number = "")
{

    stBankInfo BankInfo;

    if (Account_Number == "")
    {

        Print_String(BankInfo.Account_Number, "Please Inter Account Number : ");

        while (Check_If_Account_Number_Exist_In_File(BankInfo.Account_Number) || BankInfo.Account_Number == "")
        {

            Print_String(BankInfo.Account_Number, "Ops, Already Account Number Exist.. Try Again : ");

        }

        if (BankInfo.Account_Number == "")
            return BankInfo;

    }
    else
    {

        BankInfo.Account_Number = Account_Number;

    }

    do
    {

        Print_String(BankInfo.User_Name, "Please Inter User Name : ");

    } while (Check_User_Name_Is_Exist(BankInfo.User_Name));

    Print_String(BankInfo.PIN_Code, "Please Inter PIN Code : ");
    Print_String(BankInfo.Phone_Number, "Please Inter Phone Number: ");
    co "Please Inter Account Balance : "; ci BankInfo.Account_Balance;
    BankInfo.Record = BankInfo.Generate_Account_Record();

    return BankInfo;

}

//stBankInfo Get_Bank_Info_Using_User_Info(string Account_Number = "")
//{
//
//    stBankInfo BankInfo;
//
//    Print_String(BankInfo.User_Name, "Please Inter User Name : ");
//
//    while (Check_User_Name_Is_Exist(BankInfo.User_Name) || BankInfo.User_Name == "Admin")
//    {
//        Print_String(BankInfo.User_Name, "Ops, Not Found Or You Are Not Allowed To Delete This User.. Try Again : ");
//    }
//
//    co "Please Inter Password : "; ci BankInfo.PIN_Code;
//    co "Please Inter Password : "; ci BankInfo.Permissions;
//
//    BankInfo.Record = BankInfo.Generate_Account_Record();
//
//    return BankInfo;
//
//}

int Permissions_Question(string Access, int Num_Op)
{

    char Agree;

    co "Do You Want To Give Access To " o Access o " Y/N ? "; ci Agree;

    if (toupper(Agree) == 'Y')
        return (int)pow(2, Num_Op);

    return 0;

}

int Ask_Permissions()
{

    char Agree; int Permissions = 0;

    co "Do You Want To Give Full Access To System Y/N ? "; ci Agree;

    if (toupper(Agree) == 'Y')
        return -1;

    Permissions += Permissions_Question("Show Clients", 1);
    Permissions += Permissions_Question("Add Client", 2);
    Permissions += Permissions_Question("Delete Client", 3);
    Permissions += Permissions_Question("Update Client", 4);
    Permissions += Permissions_Question("Find Client", 5);
    Permissions += Permissions_Question("Transactions", 6);
    Permissions += Permissions_Question("Manage Users", 7);

    return Permissions;

}

string Get_User_Name(string File_Name = User_File_Name)
{

    vector <stBankInfo> v_Bank_Info = Extract_Accounts_From_File(File_Name); bool ok = 1;

    string User_Name;

    Print_String(User_Name, "Inter User Name : ");

    do
    {
        
        ok = 1;

        if (User_Name == "Admin")
            ok = 0;
        else
        {
            for (auto& User_Info : v_Bank_Info)
            {

                if (User_Info.User_Name == User_Name)
                {
                    ok = 0;
                    break;
                }

            }
        }

        if (!ok)
            Print_String(User_Name, "Not Found Or You Are Not Allowed To Access.. Inter Another User Name : ");

    } while (!ok);

    return User_Name;

}

string Find_User_Name(string File_Name = User_File_Name)
{

    vector <stBankInfo> v_Bank_Info = Extract_Accounts_From_File(File_Name); bool ok = 1;

    string User_Name;

    Print_String(User_Name, "Inter User Name : ");

    do
    {

        ok = 0;

        if (User_Name == "Admin")
            ok = 0;
        else
        {
            for (auto& User_Info : v_Bank_Info)
            {

                if (User_Info.User_Name == User_Name)
                {
                    ok = 1;
                    break;
                }

            }
        }

        if (!ok)
            Print_String(User_Name, "Not Found Or You Are Not Allowed To Access.. Inter Another User Name : ");

    } while (!ok);

    return User_Name;

}

stBankInfo Get_User_Info(string User_Name = "")
{

    stBankInfo UserInfo;

    if (User_Name == "")
        UserInfo.User_Name = Get_User_Name();
    else
        UserInfo.User_Name = User_Name;

    Print_String(UserInfo.PIN_Code, "Please Inter PIN Code : ");

    UserInfo.Permissions = Ask_Permissions();

    UserInfo.Phone_Number = UserInfo.Account_Number = ".";

    UserInfo.Record = UserInfo.Generate_Account_Record();

    return UserInfo;

}

void Bank_Info_In_File(stBankInfo Bank_Info)
{

    if (Bank_Info.Account_Number == "")
        return;

    fstream file;

    file.open("Bank.txt", ios::in | ios::out | ios::app);

    if (file.is_open())
    {

        file << "Account : _____________________" o endl;
        file << "Account Number : " o Bank_Info.Account_Number o endl;
        file << "PIN Code : " o Bank_Info.PIN_Code o endl;
        file << "Full Name : " o Bank_Info.User_Name o endl;
        file << "Phone Number : " o Bank_Info.Phone_Number o endl;
        file << "Account Balance : " o Bank_Info.Account_Balance o endl;
        file << "_______________________________" o endl;

    }

}

void Bank_Record_In_File(string File_Name, string Record)
{

    fstream file;

    file.open(File_Name + ".txt", ios::out | ios::app);

    if (file.is_open())
    {

        if (Record != "")
            file << Record o endl;

        file.close();

    }

}

void Get_Users_Record(vector <string>& Records)
{

    char More; short User = 1; string Account_Record;

    do
    {

        stBankInfo Account_Info; // Get New Accounts

        system("cls");

        co "Inter User " o User o " Info : " o endl;

        Account_Record = Get_Bank_Info_Using_Account_Number().Generate_Account_Record();

        Records.push_back(Account_Record);

        co "Do You Want To Add New Account Y/N ? "; ci More;

        ++User;

    } while (toupper(More) == 'Y');

}

void Add_Accounts_Records_In_File(string File_Name, vector <string> Accounts_Records)
{

    fstream File;

    File.open(File_Name + ".txt", ios::out | ios::trunc);
    File.close();

    for (string& Record : Accounts_Records)
    {
        Bank_Record_In_File(File_Name, Record);
    }

}

void Print_UnderScore(short Times, bool New_Line = 0)
{

    for (short _ = 0; _ < Times; ++_)
        co "_";

    if (New_Line)
        co endl;

}

void Print_EqualSign(short Times, bool New_Line = 0)
{

    for (short _ = 0; _ < Times; ++_)
        co "=";

    if (New_Line)
        co endl;

}

void  Clients_List(vector <stBankInfo> v_AccountsInfo)
{

    Dynamic_Accounts_List_Table("Clients List - (", ") Client/s");

}

void Search_Using_Account_Number_and_Print(string File_Name = "Bank")
{

    string Account_Number;

    vector <stBankInfo> v_AccountsInfo = Extract_Accounts_From_File(File_Name);

    char Try_Again;

    bool ok = 0;

    do
    {

        co "Inter Account Number : "; getline(cin >> ws, Account_Number);

        for (auto Account_Info : v_AccountsInfo)
        {

            if (Account_Number == Account_Info.Account_Number)
            {

                Account_Info.Print();

                ok = 1;

                break;

            }

            ok = 0;

        }

        if (ok)
            co "\nDo You Want Search More Y/N ? \n";
        else
            co "No Account Found, Do You Want Try Again Y/N ? \n";

        ci Try_Again;

    } while (toupper(Try_Again) == 'Y');


}

stBankInfo Search_Using_UserName_and_ReturnResult(string User_Name = "", string File_Name = "Bank")
{

    stBankInfo Empty;

    if (User_Name == "")
        User_Name = Get_User_Name();

    vector <stBankInfo> v_AccountsInfo = Extract_Accounts_From_File(File_Name);

    for (auto Account_Info : v_AccountsInfo)
    {

        if (User_Name == Account_Info.User_Name)
        {

            return Account_Info;

        }

    }

    v_AccountsInfo.clear();

    v_AccountsInfo = Extract_Accounts_From_File("Users_Management");

    for (auto Account_Info : v_AccountsInfo)
    {

        if (User_Name == Account_Info.User_Name)
        {

            return Account_Info;

        }

    }

    return Empty;

}

stBankInfo Search_Engine_Using_Account_Number_and_Return_st(string File_Name)
{

    string Account_Number;

    vector <stBankInfo> v_AccountsInfo = Extract_Accounts_From_File(File_Name);

    co "Inter Account Number : "; getline(cin >> ws, Account_Number);

    for (auto Account_Info : v_AccountsInfo)
    {

        if (Account_Number == Account_Info.Account_Number)
        {

            Account_Info.Print();

            return Account_Info;

        }

    }

    stBankInfo Empty; // return empty result

    return Empty;

}

bool Check_User_Name_Is_Exist(string User_Name = "")
{

    //if (User_Name == "")
    //{
    //    co "Not Valid!\n";
    //    return 1;
    //}

if (Search_Using_UserName_and_ReturnResult(User_Name).User_Name == User_Name)
{
    co "Already Exist!\n";
    return 1;
}

return 0;

}

void Delete_Content_From_File(string File_Name)
{

    fstream Clear_Content_File;

    Clear_Content_File.open(File_Name + ".txt", ios::out | ios::trunc);

    Clear_Content_File.close();

}

void Delete_Client_From_File(short& Choice, string File_Name = "Bank")
{

    vector <stBankInfo> v_Bank_Info = Extract_Accounts_From_File(File_Name);

    char Delete; string Account_Number;

    Print_String(Account_Number, "Inter Account Number To Delete : ");

    for (auto& Account_Info : v_Bank_Info)
    {

        if (Account_Info.Account_Number == Account_Number)
        {

            Account_Info.Print();

            co "\nAre You Sure You Want To Delete This Account Y/N ? ";

            ci Delete;

            if (toupper(Delete) == 'Y')
            {

                if (Check_Login_File_Record(Account_Info.Record))
                {

                    Logout_Account();
                    Choice = Logout;

                }

                Account_Info.Record = "";

                Delete_Content_From_File(File_Name);

                for (auto& Account_Info_Record : v_Bank_Info)
                {

                    Bank_Record_In_File(File_Name, Account_Info_Record.Record);

                }

                co "\nDeleted Sucessfully \n";
                return;

            }
            else
            {

                co "Not Deleted\n";
                return;

            }

        }

    }

    co "Not Found\n";

}

void Delete_User_From_File(short& Choice, string File_Name = User_File_Name)
{

    vector <stBankInfo> v_Bank_Info = Extract_Accounts_From_File(File_Name);

    char Delete; string User_Name;

    Print_String(User_Name, "Inter User Name To Delete : ");

    while (User_Name == "Admin")
        Print_String(User_Name, "You Can Not Delete Admin!.. Try Again : ");

    for (auto& User_Info : v_Bank_Info)
    {

        if (User_Info.User_Name == User_Name)
        {

            User_Info.Print_User_Info();

            co "\nAre You Sure You Want To Delete This User Y/N ? ";

            ci Delete;

            if (toupper(Delete) == 'Y')
            {

                if (Check_Login_File_Record(User_Info.Record))
                {

                    Logout_Account();
                    Choice = Logout;

                }

                User_Info.Record = "";

                Delete_Content_From_File(File_Name);

                for (auto& User_Info_Record : v_Bank_Info)
                {

                    Bank_Record_In_File(File_Name, User_Info_Record.Record);

                }

                co "\nDeleted Sucessfully \n";
                return;

            }
            else
            {

                co "Not Deleted\n";
                return;

            }

        }

    }

    co "Not Found\n";

}

void Update_Client_Info(string File_Name = "Bank")
{

    vector <stBankInfo> v_Bank_Info = Extract_Accounts_From_File(File_Name);

    char Update; string Account_Number;

    Print_String(Account_Number, "Inter Account Number To Update : ");

    for (auto& Account_Info : v_Bank_Info)
    {

        if (Account_Info.Account_Number == Account_Number)
        {

            Account_Info.Print();

            co "\nAre You Sure You Want To Update This Account Y/N ? \n";

            ci Update;

            if (toupper(Update) == 'Y')
            {

                Account_Info = Get_Bank_Info_Using_Account_Number(Account_Info.Account_Number);

                Delete_Content_From_File(File_Name);

                for (auto& Account_Info_Record : v_Bank_Info)
                {

                    Bank_Record_In_File(File_Name, Account_Info_Record.Record);

                }

                co endl o "(" o Account_Number o ") Updated Sucessfully \n";
                return;

            }
            else
            {

                co "(" o Account_Number o ") Not Updated\n";
                return;

            }

        }

    }

    co "(" o Account_Number o ") Not Found\n";

}

void Update_User_Info(string File_Name = User_File_Name)
{

    vector <stBankInfo> v_Bank_Info = Extract_Accounts_From_File(File_Name);

    char Update; string User_Name;

    Print_String(User_Name, "Inter User Name To Update : ");

    while(User_Name == "Admin")
        Print_String(User_Name, "Not Allowed To Update Admin.. Inter Another User Name To Update : ");

    for (auto& User_Info : v_Bank_Info)
    {

        if (User_Info.User_Name == User_Name)
        {

            User_Info.Print_User_Info();

            co "\nAre You Sure You Want To Update This User Y/N ? \n";

            ci Update;

            if (toupper(Update) == 'Y')
            {

                User_Info = Get_User_Info(User_Info.User_Name);

                Delete_Content_From_File(File_Name);

                for (auto& User_Info_Record : v_Bank_Info)
                {

                    Bank_Record_In_File(File_Name, User_Info_Record.Record);

                }

                co endl o "(" o User_Name o ") Updated Sucessfully \n";
                return;

            }
            else
            {

                co "(" o User_Name o ") Not Updated\n";
                return;

            }

        }

    }

    co "(" o User_Name o ") Not Found\n";

}

void Press_To_Back(string Message = "")
{

    co Message;
    system("pause>0");

}

void Bank_Table_Header()
{

    Print_EqualSign(50, true);
    co right o setw(28) o "Bank Menu" o endl;
    Print_EqualSign(50, true);

}

void Bank_Table_Body()
{

    co right o setw(20) o "[1] " o "Clients List" o endl;
    co right o setw(20) o "[2] " o "Add Client" o endl;
    co right o setw(20) o "[3] " o "Delete Client" o endl;
    co right o setw(20) o "[4] " o "Update Client" o endl;
    co right o setw(20) o "[5] " o "Find Client" o endl;
    co right o setw(20) o "[6] " o "Transactions" o endl;
    co right o setw(20) o "[7] " o "Manage Users" o endl;
    co right o setw(20) o "[8] " o "Logout" o endl;
    co right o setw(20) o "[9] " o "Exit" o endl;

    Print_EqualSign(50, true);

    co "Choose From [1] To [9] : ";

}

void Deposite_Transaction()
{

    vector <stBankInfo> v_Bank_Info = Extract_Accounts_From_File(Bank_File_Name);

    char Deposit; string Account_Number; float Amount;

    Print_String(Account_Number, "Inter Account Number To Deposit : ");

    for (auto& Account_Info : v_Bank_Info)
    {

        if (Account_Info.Account_Number == Account_Number)
        {

            Account_Info.Print();

            co "\nAre You Sure You Want To Deposit In This Account Y/N ? \n";

            ci Deposit;

            if (toupper(Deposit) == 'Y')
            {

                co "Inter Amount : "; ci Amount;

                while (Amount <= 0)
                {

                    co "Please Inter Amount Positive Amount Grater Than 0 : ";
                    ci Amount;

                }

                Account_Info.Account_Balance += Amount;

                Account_Info.Record = Account_Info.Generate_Account_Record();

                Delete_Content_From_File(Bank_File_Name);

                for (auto& Account_Info_Record : v_Bank_Info)
                {

                    Bank_Record_In_File(Bank_File_Name, Account_Info_Record.Record);

                }

                co endl o "(" o Account_Number o ") Deposit Sucessfully \n";
                return;

            }
            else
            {

                co "(" o Account_Number o ") Not Deposited\n";
                return;

            }

        }

    }

    co "(" o Account_Number o ") Not Found\n";

}

void Withdraw_Transaction()
{

    vector <stBankInfo> v_Bank_Info = Extract_Accounts_From_File(Bank_File_Name);

    char Withdraw; string Account_Number; float Amount;

    Print_String(Account_Number, "Inter Account Number To Withdraw : ");

    for (auto& Account_Info : v_Bank_Info)
    {

        if (Account_Info.Account_Number == Account_Number)
        {

            Account_Info.Print();

            co "\nAre You Sure You Want To Withdraw From This Account Y/N ? \n";

            ci Withdraw;

            if (toupper(Withdraw) == 'Y')
            {

                co "Inter Amount : "; ci Amount;

                while (Amount > Account_Info.Account_Balance || Amount < 1)
                {

                    co "Please Inter Amount Between " o "1" o " And " o Account_Info.Account_Balance o " : ";
                    ci Amount;

                }

                Account_Info.Account_Balance -= Amount;

                Account_Info.Record = Account_Info.Generate_Account_Record();

                Delete_Content_From_File(Bank_File_Name);

                for (auto& Account_Info_Record : v_Bank_Info)
                {

                    Bank_Record_In_File(Bank_File_Name, Account_Info_Record.Record);

                }

                co endl o "(" o Account_Number o ") Withdraw Sucessfully \n";
                return;

            }
            else
            {

                co "(" o Account_Number o ") Not Withdrawed\n";
                return;

            }

        }

    }

    co "(" o Account_Number o ") Not Found\n";

}

void Deposit_Screen()
{

    Print_EqualSign(30, 1);
    co right o setw(20) o "Deposit\n";
    Print_EqualSign(30, 1);
    co endl;

    Deposite_Transaction();

}

void Withdraw_Screen()
{

    Print_EqualSign(30, 1);
    co right o setw(20) o "Withdraw\n";
    Print_EqualSign(30, 1);
    co endl;

    Withdraw_Transaction();

}

void Total_Balances_List(vector <stBankInfo> v_AccountsInfo)
{

    Dynamic_Accounts_List_Table("Clients List (", ") Client/s", 1, 1, 0, 0, 1);

    int Total_Balances = 0;

    for (auto Account : v_AccountsInfo)
    {
        
        Total_Balances += Account.Account_Balance;

    }

    co "\n\t\t\t [[[ Total Balances : " o Total_Balances o " ]]]" o endl;

}

void Transactions_Choices(short Choice)
{

    switch (Choice)
    {

    case Deposit:
        system("cls");
        Deposit_Screen();
        Press_To_Back("\nPress Any Key To Back To Transactions Menu ...");
        return;

    case Withdraw:
        system("cls");
        Withdraw_Screen();
        Press_To_Back("\nPress Any Key To Back To Transactions Menu ...");
        return;
        break;

    case Total_Balances:
        system("cls");
        Total_Balances_List(Extract_Accounts_From_File());
        Press_To_Back("\nPress Any Key To Back To Transactions Menu ...");
        return;

    case Back_Main:
        return;

    default:
        return;

    }
}

void Clients_Screen()
{

    Clients_List(Extract_Accounts_From_File());

}

stBankInfo Add_Client_Screen(bool Header = 1)
{

    stBankInfo BankInfo;

    if (Header == 1)
    {
        Print_EqualSign(30, 1);
        co right o setw(20) o "Add Client\n";
        Print_EqualSign(30, 1);
    }

    Bank_Record_In_File("Bank", (BankInfo = Get_Bank_Info_Using_Account_Number()).Record);

    return BankInfo;

}

void Delete_Client_Screen(short& Choice)
{

    Print_EqualSign(30, 1);
    co right o setw(20) o "Delete Client\n";
    Print_EqualSign(30, 1);

    Delete_Client_From_File(Choice);

}

void Update_Client_Screen()
{

    Print_EqualSign(30, 1);
    co right o setw(20) o "Update Client\n";
    Print_EqualSign(30, 1);

    Update_Client_Info();

}

void Find_Client_Screen()
{

    Print_EqualSign(30, 1);
    co right o setw(20) o "Find Client\n";
    Print_EqualSign(30, 1);

    Search_Using_Account_Number_and_Print();

}

void Transactions_Screen()
{

    short Choice;

    do
    {

        system("cls");

        Print_EqualSign(30, 1);
        co right o setw(20) o "Transactions\n";
        Print_EqualSign(30, 1);

        co "\t[1] Deposit\n";
        co "\t[2] Withdraw\n";
        co "\t[3] Total Balances\n";
        co "\t[4] Main Menu\n";

        Print_EqualSign(30, 1);

        co "Inter Operatin Number From [1] To [4] : "; ci Choice;

        Transactions_Choices(Choice);

    } while (Choice != Back_Main);

}

void Show_List_Users()
{

    Dynamic_Accounts_List_Table("Manage Users - (", ") User/s", 0, 1, 1, 0, 0, 1, User_File_Name);

}

void Add_User()
{

    Print_EqualSign(30, 1);
    co right o setw(20) o "Add User\n";
    Print_EqualSign(30, 1);

    stBankInfo User_To_Add;

    User_To_Add = Get_User_Info();

    Add_User_To_Bank_System(User_To_Add.Generate_Account_Record());

}

void Delete_User(short& Choice)
{

    Print_EqualSign(30, 1);
    co right o setw(20) o "Delete User\n";
    Print_EqualSign(30, 1);

    Delete_User_From_File(Choice);

}

void Update_User_Screen()
{

    Print_EqualSign(30, 1);
    co right o setw(20) o "Update User\n";
    Print_EqualSign(30, 1);

    Update_User_Info(User_File_Name);

}

void Find_User()
{

    Print_EqualSign(30, 1);
    co right o setw(20) o "Find User\n";
    Print_EqualSign(30, 1);

    Search_Using_UserName_and_ReturnResult(Find_User_Name(), User_File_Name).Print_User_Info();

}

void Manage_Users_Choices(short Choice)
{

    system("cls");

    switch (Choice)
    {

    case Show_List:
        Show_List_Users();
        Press_To_Back("\nPress Any Key To Back To Manage Users Menu ...");
        return;

    case Add_Us:
        Add_User();
        Press_To_Back("\nPress Any Key To Back To Manage Users Menu ...");
        return;

    case Delete_Us:
        Delete_User(Choice);
        Press_To_Back("\nPress Any Key To Back To Manage Users Menu ...");
        return;

    case Update_Us:
        Update_User_Screen();
        Press_To_Back("\nPress Any Key To Back To Manage Users Menu ...");
        return;

    case Find_Us:
        Find_User();
        Press_To_Back("\nPress Any Key To Back To Manage Users Menu ...");
        return;

    case Back_Main2:
        return;

    default:
        return;

    }

}

void Manage_Users_Screen()
{

    short Choice;

    do
    {

        system("cls");

        Print_EqualSign(50, 1);
        co right o setw(30) o "Manage Users\n";
        Print_EqualSign(50, 1);

        co right o setw(20) o "[1] " o "List Users" o endl;
        co right o setw(20) o "[2] " o "Add New User" o endl;
        co right o setw(20) o "[3] " o "Delete User" o endl;
        co right o setw(20) o "[4] " o "Update User Permisions" o endl;
        co right o setw(20) o "[5] " o "Find User" o endl;
        co right o setw(20) o "[6] " o "Main Menu" o endl;

        Print_EqualSign(50, true);

        co "Choose From [1] To [6] : ";

        Choice = ReadValidate_and_PosNumber();

        Manage_Users_Choices(Choice);

    } while (Choice != Back_Main2);

}

void Logout_Account()
{

    fstream Login_File;

    Login_File.open("Login.txt", ios::in);

    if (Login_File.is_open())
        Login_File.close();

    remove("Login.txt");

}

void Exit_Screen()
{

    Print_EqualSign(30, 1);
    co right o setw(20) o "Exited\n";
    Print_EqualSign(30, 1);

}

void Bank_Choices(short& Choice)
{

    system("cls");

    switch (Choice)
    {

    case Clients:
        Clients_Screen();
        Press_To_Back("\nPress Any Key To Back To Main Menu ...");
        return;

    case Add_Cl:
        Add_Client_Screen();
        Press_To_Back("\nPress Any Key To Back To Main Menu ...");
        return;

    case Delete_Cl:
        Delete_Client_Screen(Choice);
        if (Choice != Logout)
            Press_To_Back("\nPress Any Key To Back To Main Menu ...");
        return;

    case Update_Cl:
        Update_Client_Screen();
        Press_To_Back("\nPress Any Key To Back To Main Menu ...");
        return;

    case Find_Cl:
        Find_Client_Screen();
        Press_To_Back("\nPress Any Key To Back To Main Menu ...");
        return;

    case Transactions:
        Transactions_Screen();
        return;


    case ManageUsers:
        Manage_Users_Screen();
        return;

    case Logout:
        Logout_Account();
        return;

    case Exit:
        Exit_Screen();
        Press_To_Back("\nPress Any Key To Close ...");
        return;

    default:
        break;

    }

}

bool Check_Permissions(int Choice, int Permissions)
{

    return Permissions & int(pow(2, Choice));

}

void Access_Denied_Message()
{

    system("cls");

    Print_UnderScore(60, 1);
    co "Access Denied\n";
    co "Contact Admin To Give You Access To Enter This Section\n";
    Print_UnderScore(60, 1);

    co endl o endl;

    Press_To_Back("Press Any Ket To Back To Main Menu...");

}

short Bank_Interface(int Permissions)
{

    short Choice;

    do
    {

        system("cls");

        Bank_Table_Header();

        Bank_Table_Body();

        ci Choice;

        if (Check_Permissions(Choice, Permissions) || Choice == Logout || Choice == Exit)
            Bank_Choices(Choice);
        else if (Choice > 0 && Choice < 10)
            Access_Denied_Message();

    } while (Choice != Logout && Choice != Exit);

    return Choice;

}

void Login_Header()
{

    Print_EqualSign(40); co endl;
    co "\t\tLogin\n";
    Print_EqualSign(40); co endl;

}

bool Check_Login_Details(stAccountInfo& Account, stBankInfo& Bank_Info)
{

    if (Bank_Info.PIN_Code == "" || Bank_Info.PIN_Code != Account.Password)
    {

        Press_To_Back("Invalid User Name Or Password!\nPress Any Key To Try Again..");

        return 1;

    }

    return 0;
        
}

stBankInfo Login_Screen()
{

    stBankInfo Bank_Info;

    stAccountInfo Account;

    do
    {

        system("cls");

        Login_Header();
        
        Account.Get_Account_Info();

        Bank_Info = Search_Using_UserName_and_ReturnResult(Account.User_Name);


    } while (Check_Login_Details(Account, Bank_Info));

    return Bank_Info;

}

void Create_Header()
{

    Print_EqualSign(40); co endl;
    co "\t\tCreate Account\n";
    Print_EqualSign(40); co endl;

}

stBankInfo Create_New_Account()
{

    system("cls");

    Create_Header();

    return Add_Client_Screen(0);

}

void Register_and_Login_Header()
{

    Print_EqualSign(70); co endl;
    co "\t\tWelcome To Bank Service\n";
    Print_EqualSign(70); co endl o endl;

}

bool Check_Login_File_Record(string& Record)
{

    string Record_Log;

    fstream Login_File;

    Login_File.open("Login.txt", ios::out | ios::in | ios::app);

    if (Login_File.is_open())
    {

        getline(Login_File, Record_Log);

        if (Record_Log == Record)
            return 1;

    }

    return 0;
}

void Create_Login_File(string Record)
{

    fstream Login_File;

    Login_File.open("Login.txt", ios::out | ios::in | ios::app);

    if (Login_File.is_open())
    {

        Login_File o Record;
        
        Login_File.close();

    }

}

stBankInfo Get_Account_Logged_In_Details()
{

    vector <stBankInfo> Accounts = Extract_Accounts_From_File("Login");

    if (!Accounts.empty())
    {

        if (Accounts.front().Record != "")
            return Get_Line_Recorde_and_Generate_stBankInfo(Accounts.front().Record);
        else
            Logout_Account();

    }

    stBankInfo Empty;
    return Empty;

}

stBankInfo Register_and_Login_Body()
{

    int Num; stBankInfo Account;

    do
    {
        
        Num = ReadValidateNumber("[1] Create Account / [2] Login : ");

    } while (Num != 1 && Num != 2);

    if (Num == 2)
        Account = Login_Screen();
    else
        Account = Create_New_Account();

    Account.Generate_Account_Record();

    Create_Login_File(Account.Record);

    return Account;

}

stBankInfo Register_and_Login()
{

    Register_and_Login_Header();

    return Register_and_Login_Body();

}

void Bank_V2()
{

    if (Check_Bank_System() == 0)
        Building_Bank_System();

    stBankInfo Account, Empty;

    do
    {

        system("cls");

        Account = Empty;

        Account = Get_Account_Logged_In_Details();

        if (Account.Record == "")
            Account = Register_and_Login();

    } while (Bank_Interface(Account.Permissions) != Exit);

}

int main()
{

    turbo;
    srand((int)time(NULL));

    Bank_V2();

}